#!/usr/bin/env python3
"""
AWA Environment Setup Script
Configure rapidement l'environnement de d√©veloppement AWA
"""

import os
import shutil
from pathlib import Path
from typing import Dict, Optional
import argparse


class AWASetup:
    """Gestionnaire de setup pour AWA"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.services_dir = self.project_root / "services"
        
    def setup_environment(self, supabase_url: str, supabase_anon_key: str, 
                         supabase_service_key: str):
        """Configure l'environnement avec les cl√©s Supabase"""
        
        print("üöÄ Configuration de l'environnement AWA...")
        
        # 1. Cr√©er le fichier .env.shared
        shared_env_content = f"""# ================================================
# AWA - Shared Environment Configuration
# ================================================
# Auto-generated by setup script

# ================================================
# SUPABASE CONFIGURATION (Shared)
# ================================================
SUPABASE_URL={supabase_url}
SUPABASE_ANON_KEY={supabase_anon_key}
SUPABASE_SERVICE_ROLE_KEY={supabase_service_key}

# ================================================
# GLOBAL CONFIGURATION
# ================================================
# Environment
NODE_ENV=development
APP_ENV=development

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json

# Application Info
APP_NAME="AWA - TJM Analytics"
APP_VERSION=1.0.0

# ================================================
# PATHS CONFIGURATION
# ================================================
# Data directories (relative to project root)
DATA_ROOT_DIR=./services/scraper/data
DATA_RAW_DIR=./services/scraper/data/raw
DATA_PROCESSED_DIR=./services/etl/data/processed
LOGS_DIR=./logs

# ================================================
# PERFORMANCE & LIMITS
# ================================================
# General processing limits
DEFAULT_BATCH_SIZE=100
DEFAULT_MAX_WORKERS=4
DEFAULT_TIMEOUT=30

# Rate limiting
DEFAULT_RATE_LIMIT=10
DEFAULT_RATE_PERIOD=60
"""
        
        shared_env_path = self.project_root / ".env.shared"
        with open(shared_env_path, 'w', encoding='utf-8') as f:
            f.write(shared_env_content)
        print(f"‚úÖ {shared_env_path} cr√©√©")
        
        # 2. Configurer chaque service
        self._setup_scraper(supabase_url, supabase_anon_key, supabase_service_key)
        self._setup_etl(supabase_url, supabase_anon_key, supabase_service_key)
        self._setup_frontend(supabase_url, supabase_anon_key, supabase_service_key)
        
        # 3. Cr√©er les r√©pertoires n√©cessaires
        self._create_directories()
        
        print("\\nüéâ Configuration termin√©e avec succ√®s!")
        print("\\nüìã Prochaines √©tapes:")
        print("  1. V√©rifier la config: python scripts/env_manager.py validate")
        print("  2. Tester l'ETL: cd services/etl && python run_simple_etl.py")
        print("  3. Lancer le frontend: cd services/frontend && npm run dev")
        
    def _setup_scraper(self, url: str, anon_key: str, service_key: str):
        """Configure le service scraper"""
        scraper_env_content = f"""# ================================================
# SCRAPER ENVIRONMENT CONFIGURATION
# ================================================
# Auto-generated by setup script

# ================================================
# SUPABASE CONFIGURATION
# ================================================
SUPABASE_URL={url}
SUPABASE_ANON_KEY={anon_key}
SUPABASE_SERVICE_ROLE_KEY={service_key}

# ================================================
# SCRAPER SPECIFIC CONFIGURATION  
# ================================================
# Scrapy settings
SCRAPY_LOG_LEVEL=INFO
SCRAPY_DOWNLOAD_DELAY=2
SCRAPY_CONCURRENT_REQUESTS=8
SCRAPY_CONCURRENT_REQUESTS_PER_DOMAIN=2
SCRAPY_USER_AGENT="AWA-Scraper/1.0 (+https://awa.analytics)"

# Performance settings
SCRAPER_BATCH_SIZE=50
SCRAPER_MAX_WORKERS=4
SCRAPER_TIMEOUT=30

# Rate limiting
SCRAPER_RATE_LIMIT=10
SCRAPER_REQUESTS_PER_SECOND=2

# Output configuration
SCRAPER_OUTPUT_FORMAT=jsonl
SCRAPER_ENABLE_COMPRESSION=true

# ================================================
# OPTIONAL CONFIGURATIONS
# ================================================
# Proxy settings (uncomment if needed)
# HTTP_PROXY=http://proxy:8080
# HTTPS_PROXY=https://proxy:8080

# Monitoring
# SENTRY_DSN=your_sentry_dsn

# Cache settings
SCRAPER_ENABLE_CACHE=true
SCRAPER_CACHE_TTL=3600

# Quality checks
SCRAPER_MIN_QUALITY_SCORE=0.5
SCRAPER_ENABLE_VALIDATION=true
"""
        
        scraper_env_path = self.services_dir / "scraper" / ".env"
        with open(scraper_env_path, 'w', encoding='utf-8') as f:
            f.write(scraper_env_content)
        print(f"‚úÖ {scraper_env_path} cr√©√©")
        
    def _setup_etl(self, url: str, anon_key: str, service_key: str):
        """Configure le service ETL"""
        etl_env_content = f"""# ================================================
# ETL ENVIRONMENT CONFIGURATION
# ================================================
# Auto-generated by setup script

# ================================================
# SUPABASE CONFIGURATION
# ================================================
SUPABASE_URL={url}
SUPABASE_ANON_KEY={anon_key}
SUPABASE_SERVICE_ROLE_KEY={service_key}

# ================================================
# ETL SPECIFIC CONFIGURATION
# ================================================
# Processing settings
ETL_BATCH_SIZE=100
ETL_MAX_WORKERS=4
ETL_MIN_QUALITY_SCORE=0.6
ETL_TIMEOUT=30

# Directories (relative to ETL service root)
ETL_SOURCE_DIR=../scraper/data/raw
ETL_PROCESSED_DIR=./data/processed
ETL_LOGS_DIR=./logs

# Pipeline configuration
ETL_ENABLE_QUALITY_CHECKS=true
ETL_STRICT_VALIDATION=false
ETL_AUTO_RETRY=true
ETL_MAX_RETRIES=3

# Performance settings
ETL_ENABLE_CACHING=true
ETL_CACHE_TTL=3600
ETL_ENABLE_PARALLEL_PROCESSING=true

# Database settings
ETL_CONNECTION_POOL_SIZE=5
ETL_CONNECTION_TIMEOUT=10
ETL_UPSERT_BATCH_SIZE=50

# Monitoring and alerts
ETL_ENABLE_METRICS=true
ETL_ALERT_ON_FAILURE=true
ETL_METRICS_INTERVAL=60

# Logging
ETL_LOG_LEVEL=INFO
ETL_LOG_FORMAT=json
ETL_ENABLE_FILE_LOGGING=true
"""
        
        etl_env_path = self.services_dir / "etl" / ".env"
        with open(etl_env_path, 'w', encoding='utf-8') as f:
            f.write(etl_env_content)
        print(f"‚úÖ {etl_env_path} cr√©√©")
        
    def _setup_frontend(self, url: str, anon_key: str, service_key: str):
        """Configure le service frontend"""
        frontend_env_content = f"""# ================================================
# FRONTEND ENVIRONMENT CONFIGURATION
# ================================================
# Auto-generated by setup script

# ================================================
# SUPABASE CONFIGURATION
# ================================================
# Public variables (exposed to browser)
NEXT_PUBLIC_SUPABASE_URL={url}
NEXT_PUBLIC_SUPABASE_ANON_KEY={anon_key}

# Server-side only (for API routes)
SUPABASE_SERVICE_ROLE_KEY={service_key}

# ================================================
# APPLICATION CONFIGURATION
# ================================================
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_APP_NAME="AWA - TJM Analytics"

# Environment
NODE_ENV=development

# ================================================
# OPTIONAL CONFIGURATIONS
# ================================================
# Analytics (uncomment if needed)
# NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX

# Features flags
NEXT_PUBLIC_ENABLE_ANALYTICS=false
NEXT_PUBLIC_ENABLE_DEBUG=true
"""
        
        frontend_env_path = self.services_dir / "frontend" / ".env.local"
        with open(frontend_env_path, 'w', encoding='utf-8') as f:
            f.write(frontend_env_content)
        print(f"‚úÖ {frontend_env_path} cr√©√©")
        
    def _create_directories(self):
        """Cr√©e les r√©pertoires n√©cessaires"""
        directories = [
            self.project_root / "logs",
            self.services_dir / "scraper" / "data" / "raw", 
            self.services_dir / "scraper" / "data" / "processed",
            self.services_dir / "etl" / "data" / "processed",
            self.services_dir / "etl" / "logs"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ {directory} cr√©√©")
            
    def interactive_setup(self):
        """Setup interactif avec saisie utilisateur"""
        print("üîß Configuration interactive d'AWA")
        print("=" * 50)
        
        print("\\nüìã Veuillez fournir vos informations Supabase:")
        print("   (Disponibles dans votre dashboard Supabase > Settings > API)")
        
        supabase_url = input("\\nüåê URL Supabase (ex: https://xxx.supabase.co): ").strip()
        if not supabase_url:
            print("‚ùå URL Supabase requise")
            return
            
        supabase_anon_key = input("\\nüîë Cl√© Anon Supabase: ").strip() 
        if not supabase_anon_key:
            print("‚ùå Cl√© Anon Supabase requise")
            return
            
        supabase_service_key = input("\\nüîê Cl√© Service Role Supabase: ").strip()
        if not supabase_service_key:
            print("‚ùå Cl√© Service Role Supabase requise") 
            return
            
        print(f"\\nüìù Configuration:")
        print(f"  URL: {supabase_url}")
        print(f"  Anon Key: {supabase_anon_key[:20]}...")
        print(f"  Service Key: {supabase_service_key[:20]}...")
        
        confirm = input("\\n‚úÖ Confirmer la configuration? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå Configuration annul√©e")
            return
            
        self.setup_environment(supabase_url, supabase_anon_key, supabase_service_key)
        
    def check_existing_config(self) -> bool:
        """V√©rifie si une configuration existe d√©j√†"""
        config_files = [
            self.project_root / ".env.shared",
            self.services_dir / "scraper" / ".env",
            self.services_dir / "etl" / ".env", 
            self.services_dir / "frontend" / ".env.local"
        ]
        
        existing = [f for f in config_files if f.exists()]
        
        if existing:
            print(f"‚ö†Ô∏è  Configuration existante d√©tect√©e:")
            for f in existing:
                print(f"  - {f}")
            
            overwrite = input("\\nüîÑ √âcraser la configuration existante? (y/N): ").strip().lower()
            return overwrite == 'y'
            
        return True


def main():
    parser = argparse.ArgumentParser(description="AWA Environment Setup Script")
    parser.add_argument("--url", help="Supabase URL")
    parser.add_argument("--anon-key", help="Supabase Anon Key")  
    parser.add_argument("--service-key", help="Supabase Service Role Key")
    parser.add_argument("--interactive", "-i", action="store_true", 
                       help="Mode interactif")
    parser.add_argument("--force", "-f", action="store_true",
                       help="Forcer l'√©crasement des fichiers existants")
    
    args = parser.parse_args()
    
    setup = AWASetup()
    
    # V√©rifier la configuration existante
    if not args.force and not setup.check_existing_config():
        print("‚ùå Setup annul√©")
        return
        
    if args.interactive:
        setup.interactive_setup()
    elif args.url and args.anon_key and args.service_key:
        setup.setup_environment(args.url, args.anon_key, args.service_key)
    else:
        print("‚ùå Mode non-interactif n√©cessite --url, --anon-key et --service-key")
        print("   Ou utilisez --interactive pour le mode interactif")


if __name__ == "__main__":
    main()
