#!/usr/bin/env python3
"""
Test complet et approfondi du spider FreeWork corrig√©
Valide toutes les fonctionnalit√©s d'extraction de donn√©es
"""

import sys
import json
import requests
from datetime import datetime
from urllib.parse import urljoin
import re

# Import du spider
sys.path.append('.')
from spiders.freework import FreeWorkSpider

class FreeWorkTester:
    def __init__(self):
        self.spider = FreeWorkSpider()
        self.test_urls = [
            # URLs de test fonctionnelles
            'https://www.free-work.com/fr/tech-it/assistant-chef-de-projet/job-mission/chef-de-projet-erp-h-f-328',
            'https://www.free-work.com/fr/tech-it/ingenieur-devops-cloud/job-mission/architecte-technique-it-azure-devops-f-h',
            'https://www.free-work.com/fr/tech-it/developpeur-autre-langage-cobol-perl-vba-ruby-shell/job-mission/developpeur-c-winform-f-h-2'
        ]
        
    def run_comprehensive_test(self):
        """Ex√©cute un test complet du spider"""
        print("üß™ D√âBUT DU TEST COMPLET DU SPIDER FREEWORK")
        print("=" * 60)
        
        results = []
        
        for i, url in enumerate(self.test_urls, 1):
            print(f"\nüìã TEST {i}/3: {url}")
            print("-" * 50)
            
            try:
                # T√©l√©charger la page
                response = self._get_response(url)
                if not response:
                    print("‚ùå Impossible de t√©l√©charger la page")
                    continue
                
                # Tester toutes les m√©thodes d'extraction
                result = self._test_all_extractions(response, url)
                results.append(result)
                
                # Afficher les r√©sultats
                self._display_result(result, i)
                
            except Exception as e:
                print(f"‚ùå Erreur lors du test: {e}")
                continue
        
        # R√©sum√© final
        self._display_summary(results)
        
    def _get_response(self, url):
        """Simule une r√©ponse Scrapy"""
        try:
            response = requests.get(url, headers={
                'User-Agent': 'AWA-FreeWork-Scraper/1.0'
            }, timeout=10)
            response.raise_for_status()
            
            # Cr√©er un objet mock response pour Scrapy
            class MockResponse:
                def __init__(self, response):
                    self.url = response.url
                    self.text = response.text
                    self._response = response
                    
                def css(self, selector):
                    return MockSelector(self.text, selector)
                    
            return MockResponse(response)
        except Exception as e:
            print(f"Erreur de t√©l√©chargement: {e}")
            return None
    
    def _test_all_extractions(self, response, url):
        """Teste toutes les m√©thodes d'extraction"""
        result = {
            'url': url,
            'timestamp': datetime.now().isoformat(),
            'extractions': {}
        }
        
        # Test de chaque m√©thode d'extraction
        extraction_methods = [
            ('source_id', self.spider.extract_source_id, url),
            ('title', self.spider.extract_title, response),
            ('tjm', self.spider.extract_tjm, response),
            ('company', self.spider.extract_company, response),
            ('technologies', self.spider.extract_technologies, response),
            ('location', self.spider.extract_location, response),
            ('seniority', self.spider.extract_seniority, response),
            ('remote_policy', self.spider.extract_remote_policy, response),
            ('contract_type', self.spider.extract_contract_type, response),
            ('description', self.spider.extract_description, response)
        ]
        
        for method_name, method, arg in extraction_methods:
            try:
                if method_name == 'tjm':
                    tjm_min, tjm_max = method(arg)
                    result['extractions'][method_name] = {
                        'min': tjm_min,
                        'max': tjm_max,
                        'status': '‚úÖ' if tjm_min or tjm_max else '‚ö†Ô∏è'
                    }
                else:
                    value = method(arg)
                    result['extractions'][method_name] = {
                        'value': value,
                        'status': '‚úÖ' if value else '‚ö†Ô∏è'
                    }
            except Exception as e:
                result['extractions'][method_name] = {
                    'value': None,
                    'status': '‚ùå',
                    'error': str(e)
                }
        
        return result
    
    def _display_result(self, result, test_num):
        """Affiche les r√©sultats d'un test"""
        print(f"\nüìä R√âSULTATS DU TEST {test_num}:")
        
        extractions = result['extractions']
        
        # Source ID
        source_id = extractions.get('source_id', {})
        print(f"üÜî Source ID: {source_id.get('status', '‚ùå')} {source_id.get('value', 'N/A')}")
        
        # Titre
        title = extractions.get('title', {})
        print(f"üìù Titre: {title.get('status', '‚ùå')} {title.get('value', 'N/A')}")
        
        # TJM
        tjm = extractions.get('tjm', {})
        tjm_min = tjm.get('min')
        tjm_max = tjm.get('max')
        if tjm_min and tjm_max:
            if tjm_min == tjm_max:
                print(f"üí∞ TJM: {tjm.get('status', '‚ùå')} {tjm_min}‚Ç¨")
            else:
                print(f"üí∞ TJM: {tjm.get('status', '‚ùå')} {tjm_min}‚Ç¨ - {tjm_max}‚Ç¨")
        else:
            print(f"üí∞ TJM: {tjm.get('status', '‚ùå')} Non trouv√©")
        
        # Entreprise
        company = extractions.get('company', {})
        print(f"üè¢ Entreprise: {company.get('status', '‚ùå')} {company.get('value', 'N/A')}")
        
        # Technologies
        technologies = extractions.get('technologies', {})
        tech_list = technologies.get('value', [])
        print(f"‚öôÔ∏è Technologies: {technologies.get('status', '‚ùå')} {tech_list} ({len(tech_list)} trouv√©es)")
        
        # Localisation
        location = extractions.get('location', {})
        print(f"üìç Localisation: {location.get('status', '‚ùå')} {location.get('value', 'N/A')}")
        
        # S√©niorit√©
        seniority = extractions.get('seniority', {})
        print(f"üëî S√©niorit√©: {seniority.get('status', '‚ùå')} {seniority.get('value', 'N/A')}")
        
        # T√©l√©travail
        remote = extractions.get('remote_policy', {})
        print(f"üè† T√©l√©travail: {remote.get('status', '‚ùå')} {remote.get('value', 'N/A')}")
        
        # Type contrat
        contract = extractions.get('contract_type', {})
        print(f"üìÑ Contrat: {contract.get('status', '‚ùå')} {contract.get('value', 'N/A')}")
        
        # Description
        description = extractions.get('description', {})
        desc_value = description.get('value', '')
        desc_preview = (desc_value[:100] + '...') if desc_value and len(desc_value) > 100 else desc_value
        print(f"üìÉ Description: {description.get('status', '‚ùå')} {desc_preview or 'N/A'}")
        
        # Erreurs
        errors = []
        for field, data in extractions.items():
            if data.get('status') == '‚ùå' and 'error' in data:
                errors.append(f"{field}: {data['error']}")
        
        if errors:
            print(f"\n‚ùå ERREURS:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
    
    def _display_summary(self, results):
        """Affiche un r√©sum√© des tests"""
        print("\n" + "=" * 60)
        print("üìà R√âSUM√â DES TESTS")
        print("=" * 60)
        
        if not results:
            print("‚ùå Aucun test r√©ussi")
            return
        
        # Statistiques par champ
        field_stats = {}
        total_tests = len(results)
        
        for result in results:
            for field, data in result['extractions'].items():
                if field not in field_stats:
                    field_stats[field] = {'success': 0, 'warning': 0, 'error': 0}
                
                status = data.get('status', '‚ùå')
                if status == '‚úÖ':
                    field_stats[field]['success'] += 1
                elif status == '‚ö†Ô∏è':
                    field_stats[field]['warning'] += 1
                else:
                    field_stats[field]['error'] += 1
        
        print(f"\nüìä TAUX DE R√âUSSITE ({total_tests} tests):")
        for field, stats in field_stats.items():
            success_rate = (stats['success'] / total_tests) * 100
            print(f"  {field:15}: {stats['success']}/{total_tests} ({success_rate:.1f}%) ‚úÖ{stats['success']} ‚ö†Ô∏è{stats['warning']} ‚ùå{stats['error']}")
        
        # Analyse des technologies
        print(f"\n‚öôÔ∏è ANALYSE DES TECHNOLOGIES:")
        all_technologies = []
        for result in results:
            tech_data = result['extractions'].get('technologies', {})
            tech_list = tech_data.get('value', [])
            if tech_list:
                all_technologies.extend(tech_list)
        
        if all_technologies:
            unique_tech = list(set(all_technologies))
            print(f"  ‚Ä¢ Technologies trouv√©es: {len(all_technologies)} total, {len(unique_tech)} uniques")
            print(f"  ‚Ä¢ Technologies uniques: {sorted(unique_tech)}")
            
            # V√©rifier s'il y a encore des doublons suspects
            tech_counts = {}
            for result in results:
                tech_list = result['extractions'].get('technologies', {}).get('value', [])
                tech_key = tuple(sorted(tech_list))
                tech_counts[tech_key] = tech_counts.get(tech_key, 0) + 1
            
            duplicates = [(tech, count) for tech, count in tech_counts.items() if count > 1]
            if duplicates:
                print(f"  ‚ö†Ô∏è ATTENTION: Technologies identiques d√©tect√©es:")
                for tech_tuple, count in duplicates:
                    print(f"     {list(tech_tuple)} ‚Üí {count} fois")
            else:
                print(f"  ‚úÖ Pas de doublons d√©tect√©s - extraction contextuelle r√©ussie!")
        else:
            print(f"  ‚ö†Ô∏è Aucune technologie extraite")
        
        # Score global
        total_extractions = sum(len(result['extractions']) for result in results)
        successful_extractions = sum(
            1 for result in results 
            for data in result['extractions'].values() 
            if data.get('status') == '‚úÖ'
        )
        
        global_score = (successful_extractions / total_extractions) * 100 if total_extractions > 0 else 0
        
        print(f"\nüèÜ SCORE GLOBAL: {successful_extractions}/{total_extractions} ({global_score:.1f}%)")
        
        if global_score >= 80:
            print("‚úÖ EXCELLENT - Spider tr√®s performant")
        elif global_score >= 60:
            print("üëç BON - Spider performant avec quelques am√©liorations possibles")
        elif global_score >= 40:
            print("‚ö†Ô∏è MOYEN - Spider n√©cessite des am√©liorations")
        else:
            print("‚ùå FAIBLE - Spider n√©cessite des corrections importantes")


class MockSelector:
    """Mock pour les s√©lecteurs CSS de Scrapy"""
    def __init__(self, html_text, selector):
        self.html_text = html_text
        self.selector = selector
        
    def get(self):
        """Retourne le premier √©l√©ment trouv√©"""
        results = self.getall()
        return results[0] if results else None
        
    def getall(self):
        """Retourne tous les √©l√©ments trouv√©s (simulation basique)"""
        # Simulation basique - dans un vrai test, on utiliserait BeautifulSoup ou lxml
        import re
        
        # Pour les s√©lecteurs de texte simples
        if '::text' in self.selector:
            base_selector = self.selector.replace('::text', '')
            # Recherche basique pour les titres h1
            if base_selector == 'h1':
                matches = re.findall(r'<h1[^>]*>(.*?)</h1>', self.html_text, re.DOTALL)
                return [re.sub(r'<[^>]+>', '', match).strip() for match in matches]
        
        # Pour les attributs
        if '::attr(' in self.selector:
            # Exemple: meta[property="og:title"]::attr(content)
            attr_match = re.search(r'::attr\(([^)]+)\)', self.selector)
            if attr_match:
                attr_name = attr_match.group(1)
                base_selector = self.selector.split('::attr')[0]
                
                if 'meta[property="og:title"]' in base_selector:
                    matches = re.findall(r'<meta[^>]*property="og:title"[^>]*content="([^"]*)"', self.html_text)
                    return matches
        
        # Pour les scripts JSON-LD
        if 'script[type="application/ld+json"]' in self.selector:
            matches = re.findall(r'<script[^>]*type="application/ld\+json"[^>]*>(.*?)</script>', 
                                self.html_text, re.DOTALL)
            return [match.strip() for match in matches]
        
        return []


if __name__ == "__main__":
    tester = FreeWorkTester()
    tester.run_comprehensive_test()
